// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependencies

import (
	"github.com/google/wire"
	"github.com/recode-sh/aws-cloud-provider/config"
	"github.com/recode-sh/aws-cloud-provider/service"
	"github.com/recode-sh/aws-cloud-provider/userconfig"
	"github.com/recode-sh/cli/internal/agent"
	"github.com/recode-sh/cli/internal/aws"
	config2 "github.com/recode-sh/cli/internal/config"
	"github.com/recode-sh/cli/internal/entities"
	features2 "github.com/recode-sh/cli/internal/features"
	"github.com/recode-sh/cli/internal/hooks"
	"github.com/recode-sh/cli/internal/interfaces"
	"github.com/recode-sh/cli/internal/presenters"
	"github.com/recode-sh/cli/internal/ssh"
	"github.com/recode-sh/cli/internal/stepper"
	"github.com/recode-sh/cli/internal/system"
	"github.com/recode-sh/cli/internal/views"
	"github.com/recode-sh/cli/internal/vscode"
	"github.com/recode-sh/recode/features"
	"github.com/recode-sh/recode/github"
	stepper2 "github.com/recode-sh/recode/stepper"
)

// Injectors from aws_remove.go:

func provideAWSRemoveFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.RemoveFeature {
	stepperStepper := stepper.NewStepper()
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	removeView := views.NewRemoveView(baseView)
	removePresenter := presenters.NewRemovePresenter(awsAWSViewableErrorBuilder, removeView)
	removeOutputHandler := features2.NewRemoveOutputHandler(removePresenter)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	removeFeature := features.NewRemoveFeature(stepperStepper, removeOutputHandler, builder)
	return removeFeature
}

// Injectors from aws_start.go:

func provideAWSStartFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.StartFeature {
	stepperStepper := stepper.NewStepper()
	userConfig := config2.NewUserConfig()
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	startView := views.NewStartView(baseView)
	startPresenter := presenters.NewStartPresenter(awsAWSViewableErrorBuilder, startView)
	defaultClientBuilder := agent.NewDefaultClientBuilder()
	githubService := github.NewService()
	logger := system.NewLogger()
	sshConfig := ssh.NewConfigWithDefaultConfigFilePath()
	keys := ssh.NewKeysWithDefaultDir()
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	process := vscode.NewProcess()
	extensions := vscode.NewExtensions()
	startOutputHandler := features2.NewStartOutputHandler(userConfig, startPresenter, defaultClientBuilder, githubService, logger, sshConfig, keys, knownHosts, process, extensions)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	startFeature := features.NewStartFeature(stepperStepper, startOutputHandler, builder)
	return startFeature
}

// Injectors from aws_stop.go:

func provideAWSStopFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.StopFeature {
	stepperStepper := stepper.NewStepper()
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	stopView := views.NewStopView(baseView)
	stopPresenter := presenters.NewStopPresenter(awsAWSViewableErrorBuilder, stopView)
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	stopOutputHandler := features2.NewStopOutputHandler(stopPresenter, knownHosts)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	stopFeature := features.NewStopFeature(stepperStepper, stopOutputHandler, builder)
	return stopFeature
}

// Injectors from aws_uninstall.go:

func provideAWSUninstallFeature(userConfigEnvVarsResolverOpts userconfig.EnvVarsResolverOpts, userConfigFilesResolverOpts userconfig.FilesResolverOpts, userConfigLocalResolverOpts aws.UserConfigLocalResolverOpts) features.UninstallFeature {
	stepperStepper := stepper.NewStepper()
	awsAWSViewableErrorBuilder := aws.NewAWSViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	uninstallView := views.NewUninstallView(baseView)
	uninstallPresenter := presenters.NewUninstallPresenter(awsAWSViewableErrorBuilder, uninstallView)
	uninstallOutputHandler := features2.NewUninstallOutputHandler(uninstallPresenter)
	envVars := system.NewEnvVars()
	envVarsResolver := userconfig.NewEnvVarsResolver(envVars, userConfigEnvVarsResolverOpts)
	profileLoader := config.NewProfileLoader()
	filesResolver := userconfig.NewFilesResolver(profileLoader, userConfigFilesResolverOpts)
	userConfigLocalResolver := aws.NewUserConfigLocalResolver(envVarsResolver, filesResolver, userConfigLocalResolverOpts)
	userConfigValidator := config.NewUserConfigValidator()
	userConfigLoader := config.NewUserConfigLoader()
	builder := service.NewBuilder(userConfigLocalResolver, userConfigValidator, userConfigLoader)
	uninstallFeature := features.NewUninstallFeature(stepperStepper, uninstallOutputHandler, builder)
	return uninstallFeature
}

// Injectors from entities.go:

func ProvideDevEnvUserConfigResolver() entities.DevEnvUserConfigResolver {
	logger := system.NewLogger()
	userConfig := config2.NewUserConfig()
	githubService := github.NewService()
	devEnvUserConfigResolver := entities.NewDevEnvUserConfigResolver(logger, userConfig, githubService)
	return devEnvUserConfigResolver
}

func ProvideDevEnvRepositoryResolver() entities.DevEnvRepositoryResolver {
	logger := system.NewLogger()
	userConfig := config2.NewUserConfig()
	githubService := github.NewService()
	devEnvRepositoryResolver := entities.NewDevEnvRepositoryResolver(logger, userConfig, githubService)
	return devEnvRepositoryResolver
}

// Injectors from hooks.go:

func ProvidePreRemoveHook() hooks.PreRemove {
	sshConfig := ssh.NewConfigWithDefaultConfigFilePath()
	keys := ssh.NewKeysWithDefaultDir()
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	userConfig := config2.NewUserConfig()
	githubService := github.NewService()
	preRemove := hooks.NewPreRemove(sshConfig, keys, knownHosts, userConfig, githubService)
	return preRemove
}

func ProvidePreStopHook() hooks.PreStop {
	knownHosts := ssh.NewKnownHostsWithDefaultKnownHostsFilePath()
	preStop := hooks.NewPreStop(knownHosts)
	return preStop
}

// Injectors from login.go:

func ProvideLoginFeature() features2.LoginFeature {
	presentersRecodeViewableErrorBuilder := presenters.NewRecodeViewableErrorBuilder()
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	loginView := views.NewLoginView(baseView)
	loginPresenter := presenters.NewLoginPresenter(presentersRecodeViewableErrorBuilder, loginView)
	logger := system.NewLogger()
	browser := system.NewBrowser()
	userConfig := config2.NewUserConfig()
	sleeper := system.NewSleeper()
	githubService := github.NewService()
	loginFeature := features2.NewLoginFeature(loginPresenter, logger, browser, userConfig, sleeper, githubService)
	return loginFeature
}

// Injectors from shared.go:

func ProvideBaseView() views.BaseView {
	displayer := system.NewDisplayer()
	baseView := views.NewBaseView(displayer)
	return baseView
}

func ProvideRecodeViewableErrorBuilder() presenters.RecodeViewableErrorBuilder {
	presentersRecodeViewableErrorBuilder := presenters.NewRecodeViewableErrorBuilder()
	return presentersRecodeViewableErrorBuilder
}

// aws_remove.go:

func ProvideAWSRemoveFeature(region, profile, credentialsFilePath, configFilePath string) features.RemoveFeature {
	return provideAWSRemoveFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_start.go:

func ProvideAWSStartFeature(region, profile, credentialsFilePath, configFilePath string) features.StartFeature {
	return provideAWSStartFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_stop.go:

func ProvideAWSStopFeature(region, profile, credentialsFilePath, configFilePath string) features.StopFeature {
	return provideAWSStopFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// aws_uninstall.go:

func ProvideAWSUninstallFeature(region, profile, credentialsFilePath, configFilePath string) features.UninstallFeature {
	return provideAWSUninstallFeature(userconfig.EnvVarsResolverOpts{
		Region: region,
	}, userconfig.FilesResolverOpts{
		Region:              region,
		Profile:             profile,
		CredentialsFilePath: credentialsFilePath,
		ConfigFilePath:      configFilePath,
	}, aws.UserConfigLocalResolverOpts{
		Profile: profile,
	},
	)
}

// shared.go:

var viewSet = wire.NewSet(wire.Bind(new(views.Displayer), new(system.Displayer)), system.NewDisplayer, views.NewBaseView)

var recodeViewableErrorBuilder = wire.NewSet(wire.Bind(new(presenters.ViewableErrorBuilder), new(presenters.RecodeViewableErrorBuilder)), presenters.NewRecodeViewableErrorBuilder)

var githubManagerSet = wire.NewSet(wire.Bind(new(interfaces.GitHubManager), new(github.Service)), github.NewService)

var userConfigManagerSet = wire.NewSet(wire.Bind(new(interfaces.UserConfigManager), new(config2.UserConfig)), config2.NewUserConfig)

var loggerSet = wire.NewSet(wire.Bind(new(interfaces.Logger), new(system.Logger)), system.NewLogger)

var sshConfigManagerSet = wire.NewSet(wire.Bind(new(interfaces.SSHConfigManager), new(ssh.Config)), ssh.NewConfigWithDefaultConfigFilePath)

var sshKnownHostsManagerSet = wire.NewSet(wire.Bind(new(interfaces.SSHKnownHostsManager), new(ssh.KnownHosts)), ssh.NewKnownHostsWithDefaultKnownHostsFilePath)

var sshKeysManagerSet = wire.NewSet(wire.Bind(new(interfaces.SSHKeysManager), new(ssh.Keys)), ssh.NewKeysWithDefaultDir)

var vscodeProcessManagerSet = wire.NewSet(wire.Bind(new(interfaces.VSCodeProcessManager), new(vscode.Process)), vscode.NewProcess)

var vscodeExtensionsManagerSet = wire.NewSet(wire.Bind(new(interfaces.VSCodeExtensionsManager), new(vscode.Extensions)), vscode.NewExtensions)

var browserManagerSet = wire.NewSet(wire.Bind(new(interfaces.BrowserManager), new(system.Browser)), system.NewBrowser)

var sleeperSet = wire.NewSet(wire.Bind(new(interfaces.Sleeper), new(system.Sleeper)), system.NewSleeper)

var stepperSet = wire.NewSet(wire.Bind(new(stepper2.Stepper), new(stepper.Stepper)), stepper.NewStepper)
